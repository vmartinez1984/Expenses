@model Expenses.Models.Period

@{
    ViewData["Title"] = "Balance";
    int balance;

    balance = Model.ListEntries.Sum(x => x.Amount) - Model.ListExpenses.Sum(x => x.Amount);
}

<div>
    <h4 class="text-info">Periodo</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.Name)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Name)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.DateStart)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.DateStart)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.DateStop)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.DateStop)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.IsActive)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.IsActive)
        </dd>
    </dl>
</div>

<h2 class="text-info text-right">
    Balance @balance.ToString("C")
</h2>

<hr />
<h2 class="text-success">Ingresos</h2>
<p>
    <a asp-action="Create" asp-controller="Entries" asp-route-periodId="@Model.Id">Agregar ingreso</a>
</p>
@await Html.PartialAsync("_ListEntries", Model.ListEntries)

<hr />
<h2 class="text-danger">Gastos</h2>
<p>
    @await Html.PartialAsync("_AgregarIngreso", new Expenses.Models.Expense())
    @* <a asp-action="Create" asp-controller="Expenses" asp-route-periodId="@Model.Id">Agregar ingreso</a>*@
</p>
@await Html.PartialAsync("_ListExpenses", Model.ListExpenses)


<h2 class="text-info text-right">
    Balance @balance.ToString("C")
</h2>

<hr />
<div>
    <a asp-action="Index">Regresar a la lista</a>
</div>
@section Scripts {
    @{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}
<script>
    function loadLisSubcateries(){
        var categoryId;

        categoryId = document.getElementById("CategoryId").value;
        if(categoryId != ''){
            var url;

            url = "/Subcategories/Get/"+categoryId;
            console.log(url);
            fetch(url).
            then( response =>{
                if (response.ok) {
                return response.json();
            } else {
                throw response.error;
            }
        })
        .then(data => {
            //console.log(data);  
            var option;

            document.getElementById("SubcategoryId").innerHTML = '';
            if(data.length > 1){
                option = document.createElement("option");
                option.text = "Seleccione";         
                 option.value ="";
                document.getElementById("SubcategoryId").append(option);
            }
            data.forEach(item =>{
                option = document.createElement("option");
                option.text = item.name;
                option.value = item.id;
                document.getElementById("SubcategoryId").append(option);
                console.log(item);
            });
        })
        .catch(error => {
            console.log(error);
        });
        }
    }
</script>
}