@using Expenses.Core.Dtos
@model PeriodFullDto

@{
    ViewData["Title"] = "Details";
    decimal balance = 0;
    List<SubcategoryDto> subcategories = ViewBag.ListSubcategories2;
}

<div class="card">
    <div class="card-header">
        <h2 class="text-info">@Model.Name</h2>
        <hr/>
        @await Html.PartialAsync("../Expenses/_create", ViewBag.ExpenseDto as ExpenseDto)
    </div>
    <div class="card-body">
        <table class="table">
            <thead>
                <tr>                    
                    <th>
                        @Html.DisplayNameFor(model => model.ListExpenses[0].CategoryName)
                    </th>                    
                    <th>
                        @Html.DisplayNameFor(model => model.ListExpenses[0].SubcategoryName)
                    </th>                    
                    <th>
                        @Html.DisplayNameFor(model => model.ListExpenses[0].Name)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ListExpenses[0].Budget)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ListExpenses[0].Amount)
                    </th>
                    <th>
                        Balance
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ListExpenses[0].DateRegister)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.ListExpenses)
                {
                    <tr>                  
                        <td>
                            @Html.DisplayFor(modelItem => item.CategoryName)
                        </td>                        
                        <td>
                            @Html.DisplayFor(modelItem => item.SubcategoryName)
                        </td>                        
                        <td>
                            @Html.DisplayFor(modelItem => item.Name)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Budget)
                        </td>
                           @if (item.Amount == 0)
                           {
                                <td class="text-danger">
                                    @Html.DisplayFor(modelItem => item.Amount)
                                </td>
                           }
                           else
                           {
                                <td class="text-success">
                                    @Html.DisplayFor(modelItem => item.Amount)
                                </td>
                           }
                        <td>
                            @{
                                if (item.CategoryId == 2){
                                    balance +=  item.Amount;
                                }
                                else
                                {
                                    balance -=  item.Amount;                                    
                                }
                            }
                            @balance.ToString("C")
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.DateRegister)
                        </td>
                        <td>
                            @if(item.Id == 0)
                            {                                 
                                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop" onclick="addExpense(@item.SubcategoryId)">
                                    Agregar
                                </button>
                            }
                            else
                            {                    
                                <button type="button" class="btn btn-warning text-white" data-bs-toggle="modal" data-bs-target="#staticBackdrop" onclick="editExpense(@item.Id)">
                                    Editar
                                </button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        var periodId = @Model.Id
        var subcategories = new Array()

        @foreach (var item in subcategories)
        {
            <text>
            subcategories.push({Id : @item.Id, Name: '@item.Name', Amount : @item.Amount}) 
            </text>
        }

        function loadAmount(){            
            var subcategory
                        
            for(i=0; i < subcategories.length; i++){
                var subcategoryId

                subcategoryId = document.getElementById('SubcategoryId').value
                if(subcategories[i].Id == subcategoryId){
                    subcategory = subcategories[i]
                }
            }

            document.getElementById('Amount').value = subcategory.Amount;
        }

        function addExpense(subcategoryId){
            document.getElementById('SubcategoryId').value =subcategoryId
            document.getElementById('Id').value = periodId
            loadAmount()
        }

        function editExpense(expenseId){
            url = '/api/expenses/'+expenseId

            fetch(url)
            .then(response => response.json())
            .then((response)=>{
                //console.log(response)
                setExpense(response)
            })
        }

        function setExpense(expense){
            document.getElementById('Id').value = expense.id
            document.getElementById('PeriodId').value = expense.periodId
            document.getElementById('SubcategoryId').value = expense.subcategoryId
            document.getElementById('Name').value = expense.name
            document.getElementById('Amount').value = expense.amount
        }
    </script>
}