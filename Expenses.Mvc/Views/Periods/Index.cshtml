@using Expenses.Core.Dtos
@model IEnumerable<PeriodDto>

@{
    ViewData["Title"] = "Periodos";
}

<h1 class="text-info">Periodos</h1>

<p>
    @await Html.PartialAsync("_Create",  ViewBag.Period as PeriodDto)
</p>
<table class="table">
    <thead>
        <tr>            
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DateStart)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.DateStop)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>            
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DateStart)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DateStop)
                </td>
                <td>
                    <button type="button" class="btn btn-warning text-white" data-bs-toggle="modal" data-bs-target="#modalPeriod" onclick="editPeriod(@item.Id);">
                        Editar
                    </button>        
                    @Html.ActionLink("Detalles", "Details",null, new {  Id=item.Id }, new { @class="btn btn-info text-white"})
                    <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#staticBackdrop" onclick="deletePeriod(@item.Id);">
                        Borrar
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

@await Html.PartialAsync("_Delete", new List<PeriodDto>())

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        var periods = new Array()
        @foreach (var item in Model)
        {        
            var DateStop = ((DateTime)item.DateStop).ToString("s");
        
            <text>
                periods.push({Id : @item.Id, Name : '@item.Name', DateStart : '@item.DateStart.ToString("s")', DateStop : '@DateStop' })
            </text>
        }

        function deletePeriod(periodId){
            var period
            for(i=0; i<periods.length; i++){
                if(periods[i].Id == periodId){
                    period = periods[i]
                }
            }
            document.getElementById('periodId').value = period.Id
            document.getElementById('periodName').innerText = period.Name
            document.getElementById('periodDateStart').innerText = period.DateStart.substring(0,10)
            document.getElementById('periodDateStop').innerText = period.DateStop.substring(0,10)
        }

         function editPeriod(periodId){
            var period
            for(i=0; i<periods.length; i++){
                if(periods[i].Id == periodId){
                    period = periods[i]
                }
            } console.log(period)
            document.getElementById('Id').value = period.Id
            document.getElementById('Name').value = period.Name
            document.getElementById('DateStart').value = period.DateStart.substring(0,10)
            document.getElementById('DateStop').value = period.DateStop.substring(0,10)
        }

        function cancelPeriod(){
            location.href= 'Periods'      
        }

        function addPeriod(){

        }
    </script>
}